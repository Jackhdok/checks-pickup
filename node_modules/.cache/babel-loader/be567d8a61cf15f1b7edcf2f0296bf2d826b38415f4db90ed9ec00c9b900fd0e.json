{"ast":null,"code":"// Twilio SMS Service for sending messages to visitors\n// Uses Twilio API directly with your token\n\nconst sendSMSNotification = async clientData => {\n  const twilioToken = process.env.REACT_APP_TWILIO_TOKEN;\n  const twilioAccountSid = process.env.REACT_APP_TWILIO_ACCOUNT_SID;\n  const twilioPhoneNumber = process.env.REACT_APP_TWILIO_PHONE_NUMBER;\n  if (!twilioToken || !twilioAccountSid || !twilioPhoneNumber) {\n    console.warn('Twilio configuration not complete. Skipping SMS notification.');\n    return;\n  }\n\n  // Clean phone number (remove spaces, dashes, etc.)\n  const cleanPhone = clientData.phone.replace(/\\D/g, '');\n  const formattedPhone = cleanPhone.startsWith('1') ? `+${cleanPhone}` : `+1${cleanPhone}`;\n  const message = `Hi ${clientData.name}, your checks are ready for pickup! Please come to the Accounting Room. Thank you!`;\n  const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\n  try {\n    const response = await fetch(twilioUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': `Basic ${btoa(`${twilioAccountSid}:${twilioToken}`)}`\n      },\n      body: new URLSearchParams({\n        'To': formattedPhone,\n        'From': twilioPhoneNumber,\n        'Body': message\n      })\n    });\n    if (response.ok) {\n      console.log('SMS notification sent successfully to', formattedPhone);\n    } else {\n      const errorData = await response.text();\n      console.error('Failed to send SMS notification:', response.statusText, errorData);\n    }\n  } catch (error) {\n    console.error('Error sending SMS notification:', error);\n  }\n};\nexport default sendSMSNotification;","map":{"version":3,"names":["sendSMSNotification","clientData","twilioToken","process","env","REACT_APP_TWILIO_TOKEN","twilioAccountSid","REACT_APP_TWILIO_ACCOUNT_SID","twilioPhoneNumber","REACT_APP_TWILIO_PHONE_NUMBER","console","warn","cleanPhone","phone","replace","formattedPhone","startsWith","message","name","twilioUrl","response","fetch","method","headers","btoa","body","URLSearchParams","ok","log","errorData","text","error","statusText"],"sources":["C:/Users/PIG/OneDrive - PI Group/Desktop/CHECKIN/src/services/smsWebhook.js"],"sourcesContent":["// Twilio SMS Service for sending messages to visitors\r\n// Uses Twilio API directly with your token\r\n\r\nconst sendSMSNotification = async (clientData) => {\r\n  const twilioToken = process.env.REACT_APP_TWILIO_TOKEN;\r\n  const twilioAccountSid = process.env.REACT_APP_TWILIO_ACCOUNT_SID;\r\n  const twilioPhoneNumber = process.env.REACT_APP_TWILIO_PHONE_NUMBER;\r\n  \r\n  if (!twilioToken || !twilioAccountSid || !twilioPhoneNumber) {\r\n    console.warn('Twilio configuration not complete. Skipping SMS notification.');\r\n    return;\r\n  }\r\n\r\n  // Clean phone number (remove spaces, dashes, etc.)\r\n  const cleanPhone = clientData.phone.replace(/\\D/g, '');\r\n  const formattedPhone = cleanPhone.startsWith('1') ? `+${cleanPhone}` : `+1${cleanPhone}`;\r\n\r\n  const message = `Hi ${clientData.name}, your checks are ready for pickup! Please come to the Accounting Room. Thank you!`;\r\n\r\n  const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\r\n\r\n  try {\r\n    const response = await fetch(twilioUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Authorization': `Basic ${btoa(`${twilioAccountSid}:${twilioToken}`)}`\r\n      },\r\n      body: new URLSearchParams({\r\n        'To': formattedPhone,\r\n        'From': twilioPhoneNumber,\r\n        'Body': message\r\n      })\r\n    });\r\n\r\n    if (response.ok) {\r\n      console.log('SMS notification sent successfully to', formattedPhone);\r\n    } else {\r\n      const errorData = await response.text();\r\n      console.error('Failed to send SMS notification:', response.statusText, errorData);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending SMS notification:', error);\r\n  }\r\n};\r\n\r\nexport default sendSMSNotification;\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,mBAAmB,GAAG,MAAOC,UAAU,IAAK;EAChD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EACtD,MAAMC,gBAAgB,GAAGH,OAAO,CAACC,GAAG,CAACG,4BAA4B;EACjE,MAAMC,iBAAiB,GAAGL,OAAO,CAACC,GAAG,CAACK,6BAA6B;EAEnE,IAAI,CAACP,WAAW,IAAI,CAACI,gBAAgB,IAAI,CAACE,iBAAiB,EAAE;IAC3DE,OAAO,CAACC,IAAI,CAAC,+DAA+D,CAAC;IAC7E;EACF;;EAEA;EACA,MAAMC,UAAU,GAAGX,UAAU,CAACY,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACtD,MAAMC,cAAc,GAAGH,UAAU,CAACI,UAAU,CAAC,GAAG,CAAC,GAAG,IAAIJ,UAAU,EAAE,GAAG,KAAKA,UAAU,EAAE;EAExF,MAAMK,OAAO,GAAG,MAAMhB,UAAU,CAACiB,IAAI,oFAAoF;EAEzH,MAAMC,SAAS,GAAG,8CAA8Cb,gBAAgB,gBAAgB;EAEhG,IAAI;IACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACF,SAAS,EAAE;MACtCG,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnD,eAAe,EAAE,SAASC,IAAI,CAAC,GAAGlB,gBAAgB,IAAIJ,WAAW,EAAE,CAAC;MACtE,CAAC;MACDuB,IAAI,EAAE,IAAIC,eAAe,CAAC;QACxB,IAAI,EAAEX,cAAc;QACpB,MAAM,EAAEP,iBAAiB;QACzB,MAAM,EAAES;MACV,CAAC;IACH,CAAC,CAAC;IAEF,IAAIG,QAAQ,CAACO,EAAE,EAAE;MACfjB,OAAO,CAACkB,GAAG,CAAC,uCAAuC,EAAEb,cAAc,CAAC;IACtE,CAAC,MAAM;MACL,MAAMc,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvCpB,OAAO,CAACqB,KAAK,CAAC,kCAAkC,EAAEX,QAAQ,CAACY,UAAU,EAAEH,SAAS,CAAC;IACnF;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdrB,OAAO,CAACqB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EACzD;AACF,CAAC;AAED,eAAe/B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}