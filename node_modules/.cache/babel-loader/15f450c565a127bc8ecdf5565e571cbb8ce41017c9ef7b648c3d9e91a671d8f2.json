{"ast":null,"code":"// Power Automate Webhook Service\n// Add your Power Automate webhook URL to environment variables\n\nconst sendTeamsNotification = async clientData => {\n  const webhookUrl = process.env.REACT_APP_TEAMS_WEBHOOK_URL;\n  if (!webhookUrl) {\n    console.warn('Power Automate webhook URL not configured. Skipping notification.');\n    return;\n  }\n  const message = {\n    \"type\": \"object\",\n    \"attachments\": [{\n      \"contentType\": \"application/vnd.microsoft.teams.card.adaptive\",\n      \"contentUrl\": null,\n      \"content\": {\n        \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n        \"type\": \"AdaptiveCard\",\n        \"version\": \"1.2\",\n        \"body\": [{\n          \"type\": \"TextBlock\",\n          \"text\": \"Hi Loan,\",\n          \"weight\": \"Bolder\",\n          \"size\": \"Large\",\n          \"color\": \"Accent\"\n        }, {\n          \"type\": \"TextBlock\",\n          \"text\": `You have **${clientData.name}** come to pick up the checks. Please prepare!`,\n          \"weight\": \"Bold\",\n          \"size\": \"Medium\",\n          \"wrap\": true\n        }, {\n          \"type\": \"TextBlock\",\n          \"text\": \"Here are the details:\",\n          \"weight\": \"Bold\",\n          \"size\": \"Small\",\n          \"spacing\": \"Medium\"\n        }, {\n          \"type\": \"FactSet\",\n          \"facts\": [{\n            \"title\": \"Visitor Name\",\n            \"value\": clientData.name\n          }, {\n            \"title\": \"Phone Number\",\n            \"value\": clientData.phone\n          }, {\n            \"title\": \"Type\",\n            \"value\": clientData.type === 'vendor' ? 'Vendor' : 'Subvendor'\n          }, {\n            \"title\": \"Purpose\",\n            \"value\": \"Pickup Check\"\n          }, {\n            \"title\": \"Check-in Time\",\n            \"value\": new Date().toLocaleString()\n          }]\n        }],\n        \"actions\": [{\n          \"type\": \"Action.OpenUrl\",\n          \"title\": \"View Admin Dashboard\",\n          \"url\": window.location.origin\n        }]\n      }\n    }]\n  };\n  try {\n    const response = await fetch(webhookUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(message)\n    });\n    if (response.ok) {\n      console.log('Teams notification sent successfully');\n    } else {\n      console.error('Failed to send Teams notification:', response.statusText);\n    }\n  } catch (error) {\n    console.error('Error sending Teams notification:', error);\n  }\n};\nexport default sendTeamsNotification;","map":{"version":3,"names":["sendTeamsNotification","clientData","webhookUrl","process","env","REACT_APP_TEAMS_WEBHOOK_URL","console","warn","message","name","phone","type","Date","toLocaleString","window","location","origin","response","fetch","method","headers","body","JSON","stringify","ok","log","error","statusText"],"sources":["C:/Users/PIG/OneDrive - PI Group/Desktop/CHECKIN/src/services/teamsWebhook.js"],"sourcesContent":["// Power Automate Webhook Service\r\n// Add your Power Automate webhook URL to environment variables\r\n\r\nconst sendTeamsNotification = async (clientData) => {\r\n  const webhookUrl = process.env.REACT_APP_TEAMS_WEBHOOK_URL;\r\n  \r\n  if (!webhookUrl) {\r\n    console.warn('Power Automate webhook URL not configured. Skipping notification.');\r\n    return;\r\n  }\r\n\r\n  const message = {\r\n    \"type\": \"object\",\r\n    \"attachments\": [\r\n      {\r\n        \"contentType\": \"application/vnd.microsoft.teams.card.adaptive\",\r\n        \"contentUrl\": null,\r\n        \"content\": {\r\n          \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\r\n          \"type\": \"AdaptiveCard\",\r\n          \"version\": \"1.2\",\r\n          \"body\": [\r\n            {\r\n              \"type\": \"TextBlock\",\r\n              \"text\": \"Hi Loan,\",\r\n              \"weight\": \"Bolder\",\r\n              \"size\": \"Large\",\r\n              \"color\": \"Accent\"\r\n            },\r\n            {\r\n              \"type\": \"TextBlock\",\r\n              \"text\": `You have **${clientData.name}** come to pick up the checks. Please prepare!`,\r\n              \"weight\": \"Bold\",\r\n              \"size\": \"Medium\",\r\n              \"wrap\": true\r\n            },\r\n            {\r\n              \"type\": \"TextBlock\",\r\n              \"text\": \"Here are the details:\",\r\n              \"weight\": \"Bold\",\r\n              \"size\": \"Small\",\r\n              \"spacing\": \"Medium\"\r\n            },\r\n            {\r\n              \"type\": \"FactSet\",\r\n              \"facts\": [\r\n                {\r\n                  \"title\": \"Visitor Name\",\r\n                  \"value\": clientData.name\r\n                },\r\n                {\r\n                  \"title\": \"Phone Number\",\r\n                  \"value\": clientData.phone\r\n                },\r\n                {\r\n                  \"title\": \"Type\",\r\n                  \"value\": clientData.type === 'vendor' ? 'Vendor' : 'Subvendor'\r\n                },\r\n                {\r\n                  \"title\": \"Purpose\",\r\n                  \"value\": \"Pickup Check\"\r\n                },\r\n                {\r\n                  \"title\": \"Check-in Time\",\r\n                  \"value\": new Date().toLocaleString()\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n          \"actions\": [\r\n            {\r\n              \"type\": \"Action.OpenUrl\",\r\n              \"title\": \"View Admin Dashboard\",\r\n              \"url\": window.location.origin\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(webhookUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(message)\r\n    });\r\n\r\n    if (response.ok) {\r\n      console.log('Teams notification sent successfully');\r\n    } else {\r\n      console.error('Failed to send Teams notification:', response.statusText);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending Teams notification:', error);\r\n  }\r\n};\r\n\r\nexport default sendTeamsNotification;\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,qBAAqB,GAAG,MAAOC,UAAU,IAAK;EAClD,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;EAE1D,IAAI,CAACH,UAAU,EAAE;IACfI,OAAO,CAACC,IAAI,CAAC,mEAAmE,CAAC;IACjF;EACF;EAEA,MAAMC,OAAO,GAAG;IACd,MAAM,EAAE,QAAQ;IAChB,aAAa,EAAE,CACb;MACE,aAAa,EAAE,+CAA+C;MAC9D,YAAY,EAAE,IAAI;MAClB,SAAS,EAAE;QACT,SAAS,EAAE,oDAAoD;QAC/D,MAAM,EAAE,cAAc;QACtB,SAAS,EAAE,KAAK;QAChB,MAAM,EAAE,CACN;UACE,MAAM,EAAE,WAAW;UACnB,MAAM,EAAE,UAAU;UAClB,QAAQ,EAAE,QAAQ;UAClB,MAAM,EAAE,OAAO;UACf,OAAO,EAAE;QACX,CAAC,EACD;UACE,MAAM,EAAE,WAAW;UACnB,MAAM,EAAE,cAAcP,UAAU,CAACQ,IAAI,gDAAgD;UACrF,QAAQ,EAAE,MAAM;UAChB,MAAM,EAAE,QAAQ;UAChB,MAAM,EAAE;QACV,CAAC,EACD;UACE,MAAM,EAAE,WAAW;UACnB,MAAM,EAAE,uBAAuB;UAC/B,QAAQ,EAAE,MAAM;UAChB,MAAM,EAAE,OAAO;UACf,SAAS,EAAE;QACb,CAAC,EACD;UACE,MAAM,EAAE,SAAS;UACjB,OAAO,EAAE,CACP;YACE,OAAO,EAAE,cAAc;YACvB,OAAO,EAAER,UAAU,CAACQ;UACtB,CAAC,EACD;YACE,OAAO,EAAE,cAAc;YACvB,OAAO,EAAER,UAAU,CAACS;UACtB,CAAC,EACD;YACE,OAAO,EAAE,MAAM;YACf,OAAO,EAAET,UAAU,CAACU,IAAI,KAAK,QAAQ,GAAG,QAAQ,GAAG;UACrD,CAAC,EACD;YACE,OAAO,EAAE,SAAS;YAClB,OAAO,EAAE;UACX,CAAC,EACD;YACE,OAAO,EAAE,eAAe;YACxB,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;UACrC,CAAC;QAEL,CAAC,CACF;QACD,SAAS,EAAE,CACT;UACE,MAAM,EAAE,gBAAgB;UACxB,OAAO,EAAE,sBAAsB;UAC/B,KAAK,EAAEC,MAAM,CAACC,QAAQ,CAACC;QACzB,CAAC;MAEL;IACF,CAAC;EAEL,CAAC;EAED,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAChB,UAAU,EAAE;MACvCiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAIS,QAAQ,CAACO,EAAE,EAAE;MACflB,OAAO,CAACmB,GAAG,CAAC,sCAAsC,CAAC;IACrD,CAAC,MAAM;MACLnB,OAAO,CAACoB,KAAK,CAAC,oCAAoC,EAAET,QAAQ,CAACU,UAAU,CAAC;IAC1E;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdpB,OAAO,CAACoB,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;EAC3D;AACF,CAAC;AAED,eAAe1B,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}