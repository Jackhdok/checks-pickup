{"ast":null,"code":"// Twilio SMS Service for sending messages to visitors\n// Uses Twilio API directly with your token\n\nconst sendSMSNotification = async clientData => {\n  const twilioToken = process.env.REACT_APP_TWILIO_AUTH_TOKEN;\n  const twilioAccountSid = process.env.REACT_APP_TWILIO_ACCOUNT_SID;\n  const twilioPhoneNumber = process.env.REACT_APP_TWILIO_PHONE_NUMBER;\n  const messagingServiceSid = process.env.REACT_APP_TWILIO_MESSAGING_SERVICE_SID;\n  if (!twilioToken || !twilioAccountSid) {\n    console.warn('Twilio configuration not complete. Skipping SMS notification.');\n    return;\n  }\n\n  // Clean phone number (remove spaces, dashes, etc.)\n  const cleanPhone = clientData.phone.replace(/\\D/g, '');\n  const formattedPhone = cleanPhone.startsWith('1') ? `+${cleanPhone}` : `+1${cleanPhone}`;\n  const message = `Hi ${clientData.name}, your checks are ready for pickup! Please come to the Accounting Room. Thank you!`;\n  const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\n\n  // Prepare the message data\n  const messageData = {\n    'To': formattedPhone,\n    'Body': message\n  };\n\n  // Use Messaging Service if available, otherwise use phone number\n  if (messagingServiceSid) {\n    messageData['MessagingServiceSid'] = messagingServiceSid;\n  } else if (twilioPhoneNumber) {\n    messageData['From'] = twilioPhoneNumber;\n  } else {\n    console.warn('No phone number or messaging service configured');\n    return;\n  }\n  try {\n    const response = await fetch(twilioUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': `Basic ${btoa(`${twilioAccountSid}:${twilioToken}`)}`\n      },\n      body: new URLSearchParams(messageData)\n    });\n    if (response.ok) {\n      const result = await response.json();\n      console.log('SMS notification sent successfully to', formattedPhone, 'Message SID:', result.sid);\n    } else {\n      const errorData = await response.text();\n      console.error('Failed to send SMS notification:', response.statusText, errorData);\n    }\n  } catch (error) {\n    console.error('Error sending SMS notification:', error);\n  }\n};\nexport default sendSMSNotification;","map":{"version":3,"names":["sendSMSNotification","clientData","twilioToken","process","env","REACT_APP_TWILIO_AUTH_TOKEN","twilioAccountSid","REACT_APP_TWILIO_ACCOUNT_SID","twilioPhoneNumber","REACT_APP_TWILIO_PHONE_NUMBER","messagingServiceSid","REACT_APP_TWILIO_MESSAGING_SERVICE_SID","console","warn","cleanPhone","phone","replace","formattedPhone","startsWith","message","name","twilioUrl","messageData","response","fetch","method","headers","btoa","body","URLSearchParams","ok","result","json","log","sid","errorData","text","error","statusText"],"sources":["C:/Users/PIG/OneDrive - PI Group/Desktop/CHECKIN/src/services/smsWebhook.js"],"sourcesContent":["// Twilio SMS Service for sending messages to visitors\r\n// Uses Twilio API directly with your token\r\n\r\nconst sendSMSNotification = async (clientData) => {\r\n  const twilioToken = process.env.REACT_APP_TWILIO_AUTH_TOKEN;\r\n  const twilioAccountSid = process.env.REACT_APP_TWILIO_ACCOUNT_SID;\r\n  const twilioPhoneNumber = process.env.REACT_APP_TWILIO_PHONE_NUMBER;\r\n  const messagingServiceSid = process.env.REACT_APP_TWILIO_MESSAGING_SERVICE_SID;\r\n  \r\n  if (!twilioToken || !twilioAccountSid) {\r\n    console.warn('Twilio configuration not complete. Skipping SMS notification.');\r\n    return;\r\n  }\r\n\r\n  // Clean phone number (remove spaces, dashes, etc.)\r\n  const cleanPhone = clientData.phone.replace(/\\D/g, '');\r\n  const formattedPhone = cleanPhone.startsWith('1') ? `+${cleanPhone}` : `+1${cleanPhone}`;\r\n\r\n  const message = `Hi ${clientData.name}, your checks are ready for pickup! Please come to the Accounting Room. Thank you!`;\r\n\r\n  const twilioUrl = `https://api.twilio.com/2010-04-01/Accounts/${twilioAccountSid}/Messages.json`;\r\n\r\n  // Prepare the message data\r\n  const messageData = {\r\n    'To': formattedPhone,\r\n    'Body': message\r\n  };\r\n\r\n  // Use Messaging Service if available, otherwise use phone number\r\n  if (messagingServiceSid) {\r\n    messageData['MessagingServiceSid'] = messagingServiceSid;\r\n  } else if (twilioPhoneNumber) {\r\n    messageData['From'] = twilioPhoneNumber;\r\n  } else {\r\n    console.warn('No phone number or messaging service configured');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(twilioUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        'Authorization': `Basic ${btoa(`${twilioAccountSid}:${twilioToken}`)}`\r\n      },\r\n      body: new URLSearchParams(messageData)\r\n    });\r\n\r\n    if (response.ok) {\r\n      const result = await response.json();\r\n      console.log('SMS notification sent successfully to', formattedPhone, 'Message SID:', result.sid);\r\n    } else {\r\n      const errorData = await response.text();\r\n      console.error('Failed to send SMS notification:', response.statusText, errorData);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error sending SMS notification:', error);\r\n  }\r\n};\r\n\r\nexport default sendSMSNotification;\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,mBAAmB,GAAG,MAAOC,UAAU,IAAK;EAChD,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,2BAA2B;EAC3D,MAAMC,gBAAgB,GAAGH,OAAO,CAACC,GAAG,CAACG,4BAA4B;EACjE,MAAMC,iBAAiB,GAAGL,OAAO,CAACC,GAAG,CAACK,6BAA6B;EACnE,MAAMC,mBAAmB,GAAGP,OAAO,CAACC,GAAG,CAACO,sCAAsC;EAE9E,IAAI,CAACT,WAAW,IAAI,CAACI,gBAAgB,EAAE;IACrCM,OAAO,CAACC,IAAI,CAAC,+DAA+D,CAAC;IAC7E;EACF;;EAEA;EACA,MAAMC,UAAU,GAAGb,UAAU,CAACc,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACtD,MAAMC,cAAc,GAAGH,UAAU,CAACI,UAAU,CAAC,GAAG,CAAC,GAAG,IAAIJ,UAAU,EAAE,GAAG,KAAKA,UAAU,EAAE;EAExF,MAAMK,OAAO,GAAG,MAAMlB,UAAU,CAACmB,IAAI,oFAAoF;EAEzH,MAAMC,SAAS,GAAG,8CAA8Cf,gBAAgB,gBAAgB;;EAEhG;EACA,MAAMgB,WAAW,GAAG;IAClB,IAAI,EAAEL,cAAc;IACpB,MAAM,EAAEE;EACV,CAAC;;EAED;EACA,IAAIT,mBAAmB,EAAE;IACvBY,WAAW,CAAC,qBAAqB,CAAC,GAAGZ,mBAAmB;EAC1D,CAAC,MAAM,IAAIF,iBAAiB,EAAE;IAC5Bc,WAAW,CAAC,MAAM,CAAC,GAAGd,iBAAiB;EACzC,CAAC,MAAM;IACLI,OAAO,CAACC,IAAI,CAAC,iDAAiD,CAAC;IAC/D;EACF;EAEA,IAAI;IACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAACH,SAAS,EAAE;MACtCI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnD,eAAe,EAAE,SAASC,IAAI,CAAC,GAAGrB,gBAAgB,IAAIJ,WAAW,EAAE,CAAC;MACtE,CAAC;MACD0B,IAAI,EAAE,IAAIC,eAAe,CAACP,WAAW;IACvC,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;MACf,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACpCpB,OAAO,CAACqB,GAAG,CAAC,uCAAuC,EAAEhB,cAAc,EAAE,cAAc,EAAEc,MAAM,CAACG,GAAG,CAAC;IAClG,CAAC,MAAM;MACL,MAAMC,SAAS,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;MACvCxB,OAAO,CAACyB,KAAK,CAAC,kCAAkC,EAAEd,QAAQ,CAACe,UAAU,EAAEH,SAAS,CAAC;IACnF;EACF,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdzB,OAAO,CAACyB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;EACzD;AACF,CAAC;AAED,eAAerC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}