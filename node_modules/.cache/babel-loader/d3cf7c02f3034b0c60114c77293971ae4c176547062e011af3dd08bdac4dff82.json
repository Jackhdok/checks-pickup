{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PIG\\\\OneDrive - PI Group\\\\Desktop\\\\CHECKIN\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AdminPage from './components/AdminPage';\nimport PublicCheckIn from './components/PublicCheckIn';\nimport sendSMSNotification from './services/smsWebhook';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [waitingList, setWaitingList] = useState([]);\n  const [isLightMode, setIsLightMode] = useState(false);\n  const [currentView, setCurrentView] = useState('admin'); // 'admin' or 'public'\n  const [calledClient, setCalledClient] = useState(null);\n  const addToWaitingList = clientData => {\n    const newClient = {\n      id: Date.now(),\n      ...clientData,\n      checkInTime: new Date().toLocaleString(),\n      status: 'waiting'\n    };\n    setWaitingList(prev => [...prev, newClient]);\n  };\n  const removeFromWaitingList = id => {\n    setWaitingList(prev => prev.filter(client => client.id !== id));\n  };\n  const updateClientStatus = (id, status) => {\n    setWaitingList(prev => prev.map(client => client.id === id ? {\n      ...client,\n      status\n    } : client));\n  };\n  const callClient = async id => {\n    const client = waitingList.find(c => c.id === id);\n    if (client) {\n      setCalledClient(client);\n      updateClientStatus(id, 'called');\n\n      // Send SMS notification to the client\n      try {\n        await sendSMSNotification(client);\n      } catch (error) {\n        console.error('Error sending SMS notification:', error);\n        // Continue even if SMS fails\n      }\n\n      // Show call notification for 5 seconds\n      setTimeout(() => {\n        setCalledClient(null);\n      }, 5000);\n    }\n  };\n  if (currentView === 'admin') {\n    return /*#__PURE__*/_jsxDEV(AdminPage, {\n      waitingList: waitingList,\n      onRemove: removeFromWaitingList,\n      onUpdateStatus: updateClientStatus,\n      onCallClient: callClient,\n      isLightMode: isLightMode,\n      onBackToPublic: () => setCurrentView('public'),\n      onOpenPublicCheckIn: () => setCurrentView('public')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(PublicCheckIn, {\n    waitingList: waitingList,\n    onAddToWaitingList: addToWaitingList,\n    isLightMode: isLightMode,\n    setIsLightMode: setIsLightMode,\n    calledClient: calledClient\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"lCg3RxbwazkxeDbVbXvsKfL8E9c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AdminPage","PublicCheckIn","sendSMSNotification","jsxDEV","_jsxDEV","App","_s","waitingList","setWaitingList","isLightMode","setIsLightMode","currentView","setCurrentView","calledClient","setCalledClient","addToWaitingList","clientData","newClient","id","Date","now","checkInTime","toLocaleString","status","prev","removeFromWaitingList","filter","client","updateClientStatus","map","callClient","find","c","error","console","setTimeout","onRemove","onUpdateStatus","onCallClient","onBackToPublic","onOpenPublicCheckIn","fileName","_jsxFileName","lineNumber","columnNumber","onAddToWaitingList","_c","$RefreshReg$"],"sources":["C:/Users/PIG/OneDrive - PI Group/Desktop/CHECKIN/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport AdminPage from './components/AdminPage';\nimport PublicCheckIn from './components/PublicCheckIn';\nimport sendSMSNotification from './services/smsWebhook';\nimport './App.css';\n\nfunction App() {\n  const [waitingList, setWaitingList] = useState([]);\n  const [isLightMode, setIsLightMode] = useState(false);\n  const [currentView, setCurrentView] = useState('admin'); // 'admin' or 'public'\n  const [calledClient, setCalledClient] = useState(null);\n\n  const addToWaitingList = (clientData) => {\n    const newClient = {\n      id: Date.now(),\n      ...clientData,\n      checkInTime: new Date().toLocaleString(),\n      status: 'waiting'\n    };\n    setWaitingList(prev => [...prev, newClient]);\n  };\n\n  const removeFromWaitingList = (id) => {\n    setWaitingList(prev => prev.filter(client => client.id !== id));\n  };\n\n  const updateClientStatus = (id, status) => {\n    setWaitingList(prev => \n      prev.map(client => \n        client.id === id ? { ...client, status } : client\n      )\n    );\n  };\n\n  const callClient = async (id) => {\n    const client = waitingList.find(c => c.id === id);\n    if (client) {\n      setCalledClient(client);\n      updateClientStatus(id, 'called');\n      \n      // Send SMS notification to the client\n      try {\n        await sendSMSNotification(client);\n      } catch (error) {\n        console.error('Error sending SMS notification:', error);\n        // Continue even if SMS fails\n      }\n      \n      // Show call notification for 5 seconds\n      setTimeout(() => {\n        setCalledClient(null);\n      }, 5000);\n    }\n  };\n\n\n  if (currentView === 'admin') {\n    return (\n      <AdminPage\n        waitingList={waitingList}\n        onRemove={removeFromWaitingList}\n        onUpdateStatus={updateClientStatus}\n        onCallClient={callClient}\n        isLightMode={isLightMode}\n        onBackToPublic={() => setCurrentView('public')}\n        onOpenPublicCheckIn={() => setCurrentView('public')}\n      />\n    );\n  }\n\n  return (\n    <PublicCheckIn\n      waitingList={waitingList}\n      onAddToWaitingList={addToWaitingList}\n      isLightMode={isLightMode}\n      setIsLightMode={setIsLightMode}\n      calledClient={calledClient}\n    />\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}